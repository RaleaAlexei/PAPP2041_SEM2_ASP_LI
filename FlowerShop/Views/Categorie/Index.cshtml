@model IEnumerable<Boutique.Models.Categorie>
@{
    ViewData["Title"] = "Categorii";
}
<div class="container p-3">
    <div class="row pt-4">
        <div class="col-6">
            <h2 class="text-muted"><font color="#7B68EE">Listă de Categorii</font></h2>
        </div>
        <div class="col-6 text-right">
            <a asp-controller="Categorie" asp-action="Creeaza" class="btn btn-outline-primary">
                <i class="fa-solid fa-circle-plus"></i> &nbsp; Categorie Nouă
            </a>
        </div>
    </div>
    <br /><br />
    @if (Model.Count() > 0)
    {
        <table class="table-bordered table-striped" style=" width:100%">
            <thead>
                <tr>
                    <th>Nume</th>
                    <th>Ordine</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var obj in Model)
                {
                    <tr>
                        <td width="50%">@obj.Name</td>
                        <td width="30%">@obj.Order</td>
                        <td class="text-center">
                            <div class="w-75 btn-group" role="group">
                                <a asp-route-Id="@obj.Id" asp-action="Editeaza" class="btn btn-outline-info">
                                    <i class="fa-solid fa-pen-to-square"></i>
                                </a>
                                <button class="btn btn-outline-danger delete-button" data-id="@obj.Id">
                                    <i class="fa-solid fa-trash-can"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Nicio Categorie</p>
    }
</div>
@section Scripts {
    <script>
        $(document).ready(() => {
            function gettoken() {
                var token = '@Html.AntiForgeryToken()';
                token = $(token).val();
                return token;
            }
            $(".delete-button").click(async (e) => {
                console.log(this);
                const id = $(e.currentTarget).data("id");
                console.log(id);
                const result = await Swal.fire({
                    title: 'Confirmare ștergere',
                    text: 'Ești sigur că vrei să ștergi acest produs?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Da, șterge',
                    cancelButtonText: 'Anulează'
                });
                if (result.isConfirmed) {
                    const response = await $.ajax({
                        url: '@Url.Action("Sterge", "Categorie")' + "/" + id,
                        type: 'POST',
                        dataType: 'json',
                        data: {
                            __RequestVerificationToken: gettoken(),
                            id
                        }
                    });
                    console.log(response.status);
                    if (response.status === 200) {
                        window.location.reload();
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: 'A apărut o eroare la ștergere.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                }
            });
        });
    </script>
}
